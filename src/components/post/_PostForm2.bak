'use client';

import {
  useCreatePostMutation,
  useSaveTagsMutation,
  useUpdateImagesPostIdMutation,
} from '@/hooks/queries/post/usePostFormMutation';
import { fetchSignedUrl } from '@/services/client-action/postImageActions';
import { useImageUploadStore } from '@/stores/post/useImageUploadStore';
import { usePostDataStore } from '@/stores/post/usePostDataStore';
import { useRouter } from 'next/navigation';
import { useEffect, useState } from 'react';

const PostForm = () => {
  const { userId, groupId, lat, lng, addressName } = usePostDataStore();
  const { images: imagesData } = useImageUploadStore();
  const router = useRouter();
  const decodedAddressName = addressName ? decodeURIComponent(addressName) : undefined;
  const [description, setDescription] = useState('');
  const [hashtag, setHashtag] = useState('');
  const [date, setDate] = useState('');
  const [time, setTime] = useState('');
  const [imageUrls, setImageUrls] = useState<string[]>([]);

  const createPostMutation = useCreatePostMutation();
  const updateImagesPostIdMutation = useUpdateImagesPostIdMutation();
  const saveTagsMutation = useSaveTagsMutation();

  useEffect(() => {
    if (!groupId || !userId) return;

    const fetchImageUrls = async () => {
      const urls = await Promise.all(
        imagesData.map(async (image) => {
          const url = await fetchSignedUrl('tour_images', groupId, image.post_image_name || '');
          return url;
        }),
      );
      setImageUrls(urls);
    };

    fetchImageUrls();
  }, [imagesData, groupId, userId]);

  const submitPost = (e: React.FormEvent) => {
    e.preventDefault();
    if (!groupId || !userId) {
      console.error('그룹 ID와 사용자 ID가 필요합니다.');
      return;
    }

    const postData = {
      userId,
      groupId,
      postDesc: description,
      postDate: date,
      postTime: time,
      postLat: lat || null,
      postLng: lng || null,
      postThumbnailImage: imagesData.find((image) => image.is_cover)?.post_image_name || '',
      imageArray: imagesData.map((image) => image.post_image_name || ''),
      postAddress: decodedAddressName!,
    };

    createPostMutation.mutate(postData, {
      onSuccess: async (data: { data: { post_id: string } }) => {
        const postId = data.data.post_id;
        const uploadSessionId = imagesData[0].upload_session_id!;

        updateImagesPostIdMutation.mutate({ postId, uploadSessionId });

        const tags = hashtag
          .split('#')
          .map((tag) => tag.trim())
          .filter((tag) => tag);

        tags.forEach((tag) => {
          saveTagsMutation.mutate({ tag, postId, groupId });
        });

        router.push(`/group/${groupId}`);
      },
    });
  };

  return (
    <div className='PostForm'>
      {!groupId || !userId ? (
        <div>로딩 중...</div>
      ) : (
        <form
          className='w-full border border-black flex flex-col'
          onSubmit={submitPost}
        >
          <label htmlFor='description'>대표</label>
          <textarea
            id='description'
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            maxLength={1000}
            placeholder='여행을 떠나고 싶은 마음으로.'
            className='description-textarea'
          />
          <label htmlFor='hashtag'>해시태그</label>
          <input
            type='text'
            id='hashtag'
            value={hashtag}
            onChange={(e) => setHashtag(e.target.value)}
            placeholder='예: 여행 친구랑'
            className='hashtag-input'
          />
          <label htmlFor='date'>날짜</label>
          <input
            type='date'
            id='date'
            value={date}
            onChange={(e) => setDate(e.target.value)}
            className='date-input'
          />
          <label htmlFor='time'>시간</label>
          <input
            type='time'
            id='time'
            value={time}
            onChange={(e) => setTime(e.target.value)}
            className='time-input'
          />
          <button
            type='submit'
            className='submit-button'
          >
            포스트 제출
          </button>
        </form>
      )}
    </div>
  );
};

export default PostForm;
